# -*- coding: utf-8 -*-
"""black_Friday_Sales_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FbQ8URQxSrYB_lNKYB-ReJoXn6-myOUm

# **Name : T.LAKSHMI SRINIVAS**<br>

# **ROLL NO: CS21B2045**

**Project name:**   Black Friday Sales Prediction using Machine Learning<br>
**Dataset Links:**   https://www.dropbox.com/s/ajfldsg0h3j3eav/BlackFridaySalesPrediction.csv?dl=1

#Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""#Importing Dataset"""

data = pd.read_csv('https://www.dropbox.com/s/ajfldsg0h3j3eav/BlackFridaySalesPrediction.csv?dl=1')

data.head()

data.info()

data.describe()

data.isnull().sum()

data.nunique()

"""#Data Visualisation"""

sns.distplot(data["Purchase"],color='g')
plt.title("Purchase Distribution")
plt.show()

data["Purchase"].describe()

"""The purchase is right skewed and we can observe multiple peaks in the distribution we can do a log transformation for the purchase."""

sns.countplot(data['Gender'])
plt.show()

data['Gender'].value_counts(normalize=True)*100

data.groupby("Gender").mean()["Purchase"]

"""On average the male gender spends more money on purchase contrary to female, and it is possible to also observe this trend by adding the total purchase."""

data.groupby("Marital_Status").mean()["Purchase"]

"""Occupation"""

plt.figure(figsize=(18,5))
sns.countplot(data['Occupation'])
plt.show()

occup = pd.DataFrame(data.groupby("Occupation").mean()["Purchase"])
occup

occup.plot(kind='bar',figsize=(15,5))
plt.title("Occupation and Purchase Analysis")
plt.show()

data.groupby("City_Category").mean()["Purchase"].plot(kind='bar')
plt.title("City Category and Purchase Analysis")
plt.show()

"""However, the city whose buyers spend the most is city type ‘C’."""

data.groupby("Stay_In_Current_City_Years").mean()["Purchase"].plot(kind='bar')
plt.title("Stay_In_Current_City_Years and Purchase Analysis")
plt.show()

"""We see the same pattern seen before which show that on average people tend to spend the same amount on purchases regardeless of their group. People who are new in city are responsible for the higher number of purchase, however looking at it individually they tend to spend the same amount independently of how many years the have lived in their current city."""

sns.countplot(data['Age'])
plt.title('Distribution of Age')
plt.xlabel('Different Categories of Age')
plt.show()

data.groupby("Age").mean()["Purchase"].plot(kind='bar')

"""Mean puchase rate between the age groups tends to be the same except that the 51-55 age group has a little higher average purchase amount"""

data.groupby('Product_Category_1').mean()['Purchase'].plot(kind='bar',figsize=(18,5))
plt.title("Product_Category_1 and Purchase Mean Analysis")
plt.show()

"""If you see the value spent on average for Product_Category_1 you see that although there were more products bought for categories 1,5,8 the average amount spent for those three is not the highest. It is interesting to see other categories appearing with high purchase values despite having low impact on sales number."""

data.groupby('Product_Category_1').sum()['Purchase'].plot(kind='bar',figsize=(18,5))
plt.title("Product_Category_1 and Purchase Analysis")
plt.show()

plt.figure(figsize=(18,5))
sns.countplot(data['Product_Category_2'])
plt.show()

plt.figure(figsize=(18,5))
sns.countplot(data['Product_Category_3'])
plt.show()

data.corr()

"""#HeatMap"""

sns.heatmap(data.corr(),annot=True)
plt.show()

data.columns

data = pd.get_dummies(data, columns=['Stay_In_Current_City_Years'])

from sklearn.preprocessing import LabelEncoder
lr = LabelEncoder()

data['Gender'] = lr.fit_transform(data['Gender'])

data['Age'] = lr.fit_transform(data['Age'])

data['City_Category'] = lr.fit_transform(data['City_Category'])

data.head()

data['Product_Category_2'] =data['Product_Category_2'].fillna(0).astype('int64')
data['Product_Category_3'] =data['Product_Category_3'].fillna(0).astype('int64')

data.isnull().sum()

data = data.drop(["User_ID","Product_ID"],axis=1)

"""#Defining X and y"""

X = data.drop("Purchase",axis=1)

y=data['Purchase']

"""#Training and Testing"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)

"""#RandomForest Model"""

from sklearn.ensemble import RandomForestRegressor
# create a regressor object 
RF = RandomForestRegressor()  
RF.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score
rf_y_pred = RF.predict(X_test)
mean_absolute_error(y_test, rf_y_pred)

mean_squared_error(y_test, rf_y_pred)

r2_score(y_test, rf_y_pred)
